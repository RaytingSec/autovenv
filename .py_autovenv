#!/bin/bash
# .py_autovenv
# 
# What:
#   The idea is virtualenv acts intuitively and smoothly like Git repositories:
#
#       - In a project dir with a .venv subdir, that virtualenv is used.
#       - Navigate to another subdir, the .venv is still used.
#       - When the project is left, the .venv is deactivate automatically.
#       - Nested venv will be prioritized
#
#   You don't type `source .git/bin/activate` and `deactivate` when changing
#   between git repositories, do you?
#
# Installation:
#   Add this line to your .bashrc or .bash-profile:
#
#       source /path/to/virtualenv-auto-activate.sh
#
#   Go to your project folder, run "virtualenv .venv", so your project folder
#   has a .venv folder at the top level, next to your version control directory.
#   For example:
#   .
#   ├── .git
#   │   ├── HEAD
#   │   ├── config
#   │   ├── description
#   │   ├── hooks
#   │   ├── info
#   │   ├── objects
#   │   └── refs
#   └── .venv
#       ├── bin
#       ├── include
#       └── lib
#
# See:
#   https://nolar.info/automatically-activate-virtualenv-on-cd/
#   https://gist.github.com/brianpkennedy/8943902

_virtualenv_auto_activate () {
    # Deactivate if venv has been set, and project dir has been left
    # This allows virtualenv to remain active when in project subdirectory
    if [[ ! -z "$VIRTUAL_ENV" ]] && [[ ! "$(pwd)" =~ "$_VENV_NAME" ]]; then
        echo "Deactivating virtualenv \"$_VENV_NAME\"..."
        deactivate
    fi

    # Activate if venv dir exists
    if [[ -d ".venv" ]]; then
        # Check to see if already activated to avoid redundant activating
        local dir="$(pwd -P)/.venv"

        if [[ "$VIRTUAL_ENV" != "$dir" ]]; then
            _VENV_NAME=$(basename `pwd`)
            echo "Activating virtualenv \"$_VENV_NAME\"..."
            VIRTUAL_ENV_DISABLE_PROMPT=1
            source .venv/bin/activate
            # If your PS1 uses _virtualenv_ps1, comment out the following
            _OLD_VIRTUAL_PS1="$PS1"
            PS1="($_VENV_NAME) $PS1"
            export PS1
        fi
    fi
}

# Add venv name to your PS1, for example:
#   PS1="$(_virtualenv_ps1) "$PS1
_virtualenv_ps1 () {
    if [[ -z "$VIRTUAL_ENV" ]]; then
        printf ""
    else
        printf "($_VENV_NAME)"
    fi
}

export PROMPT_COMMAND="_virtualenv_auto_activate; $PROMPT_COMMAND"
